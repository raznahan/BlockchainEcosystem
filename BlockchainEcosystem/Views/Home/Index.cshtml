@using Model.ViewModel
@model NetworkVM

<html>

<head>
    <title>نور گراف - اکوسیستم ارتباطی کسب و کارهای بلاکچین</title>
    <link rel="icon" type="image/png" href="/favicon.png" sizes="16x16">
    <style>
        body {
            margin: 0;
            background-color: #1e3358;
            font-face

        {
            font-family: Sahel;
            src: url("/fonts/sahel/Sahel.eot");
            src: url("/fonts/sahel/Sahel.eot?#iefix") format("embedded-opentype"),url("/fonts/sahel/Sahel.woff2") format("woff2"),url("/fonts/sahel/Sahel.woff") format("woff"),url("/fonts/sahel/Sahel.ttf") format("truetype");
            font-weight: 400;
            font-style: normal
        }

        }

        </style>

    <script src="~/Scripts/jquery-3.3.1.min.js"></script>

    <script src="~/vis/vis.js"></script>
    <link href="~/vis/vis-network.min.css" rel="stylesheet" />
    <link href="~/Content/st.css" rel="stylesheet" />
    <link href="~/Content/NetwrokStyle.css" rel="stylesheet" />

</head>

<body>

<div id="graph"></div>

    <div class="col-xs-12 col-md-2" id="searchBar">
        <form>
            <div class="form-group">
                <div class="input-group">
                    <input id="searchBarInput" autocomplete="off" type="text" class="form-control" placeholder="جستجو...">
                    <div class="input-group-btn">
                        <button type="submit" class="btn btn-success"><i class="fa fa-search fa-lg" aria-hidden="true"></i></button>
                    </div>
                </div>
            </div>
        </form>
    </div>


    <script>

// create a network
        var container = document.getElementById('graph');
        var titlesList =  @Html.Raw(Json.Encode(Model.Labels))
        var nodesList =  @Html.Raw(Json.Encode(Model.Nodes))
var data = @Html.Raw(Json.Encode(Model.GraphData))
var options = {
    edges: {
        arrows: {
            to: { enabled: true, scaleFactor: 1, type: 'arrow' },
        },
        hoverWidth: 1,
        smooth: {
            enabled: true,
            type: 'cubicBezier',
            roundness: 0
        }
    },
    nodes: {
        borderWidth: 4,
        shape: 'circularImage',
        shapeProperties: {
            useBorderWithImage: true
        },
        size: 20,
        font: {
            face: 'Sahel',
            color: 'white'
        }
    },
    physics: {
        solver: 'barnesHut',
        barnesHut: {
            gravitationalConstant: -8000,
            centralGravity: 0.8,
            springLength: 95,
            springConstant: 0.04,
            damping: 0.1,
            avoidOverlap: 0.3
        },
        stabilization: {
            enabled: true,
            iterations: 3000,
            updateInterval: 100,
            onlyDynamicEdges: false,
            fit: true
        },
    },
    layout: {
        randomSeed: 1,
    }
};
        network = new vis.Network(container, data, options);

        network.on('doubleClick', function (properties) {
            debugger;
            var toFind = properties.nodes[0];
            var filtered = data.nodes.filter(function (el) {
                return el.id === toFind;
            });

            window.open(filtered[0].link, '_blank');

        });

        network.once("stabilizationIterationsDone", function () {
            debugger;
            $('#pageloader').fadeOut();
            $('#searchBar').fadeIn();
            $('#legend').fadeIn();
        });



    </script>
    <script src="~/Content/Script/NetworkFunctions.js"></script>

</body>

</html>